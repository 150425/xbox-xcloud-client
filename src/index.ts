import { app, BrowserWindow, session } from 'electron';
import https from 'https'
// import path from 'path';
import interceptToken from './backend/cookieIntercept'
import TokenStore from './backend/TokenStore';


// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

let mainWindow:BrowserWindow

const createWindow = (): void => {
  // Create the browser window.
    mainWindow = new BrowserWindow({
    width: 1500,
    height: 900,

    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      enableRemoteModule: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: false,
      devTools: (process.env.ISDEV !== undefined) ? true : false
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  const tokenStore = new TokenStore()

  session.defaultSession.webRequest.onBeforeRedirect({
    urls: [
      'https://account.xbox.com/*'
    ]
  }, interceptToken.bind(tokenStore))

  session.defaultSession.webRequest.onSendHeaders({
    urls: [
      'https://account.xbox.com/*'
    ]
  }, interceptToken.bind(tokenStore))

  // Handle login
  tokenStore.addEventListener('onwebtoken', (tokens:any) => {
    mainWindow.webContents.executeJavaScript("setWebTokens('"+tokens.uhs+"', '"+tokens.userToken+"');");
  })

  tokenStore.addEventListener('onstreamingtoken', (token:any) => {
    mainWindow.webContents.executeJavaScript("setStreamingToken('"+token+"');");
  })

  createWindow()

  // Check for existing cookies on load
  mainWindow.webContents.on('did-finish-load', (e:Event) => {

    session.defaultSession.cookies.get({ url: 'https://www.xbox.com' }).then((cookies) => {
      for(const cookie in cookies){
        if(cookies[cookie].name === 'XBXXtkhttp://xboxlive.com'){
          // Process streaming token
          const cookieValue = decodeURIComponent(cookies[cookie].value)
          const cookieJson = JSON.parse(cookieValue)
          
          tokenStore.setWebTokens(cookieJson.UserClaims.uhs, cookieJson.Token)

        } else if(cookies[cookie].name === 'XBXXtkhttp://gssv.xboxlive.com/'){
          // Process streaming token
          const cookieValue = decodeURIComponent(cookies[cookie].value)
          const cookieJson = JSON.parse(cookieValue)
          
          // tokenStore.setStreamingToken(cookieJson.Token) // @TODO: Retrieve gamestreaming token and replace with this one.

          // Retrieve GSToken
          const data = JSON.stringify({
              "token": cookieJson.Token,
              "offeringId": "xhome"
          })

          const options = {
              hostname: 'xhome.gssv-play-prod.xboxlive.com',
              port: 443,
              path: '/v2/login/user',
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Content-Length': data.length
              }
          }
          const req = https.request(options, (res) => {
              let responseData = ''
              
              res.on('data', (data) => {
                  responseData += data
              })

              res.on('close', () => {
                  if(res.statusCode == 200){
                      const jsonHomeToken = JSON.parse(responseData.toString())
                      tokenStore.setStreamingToken(jsonHomeToken.gsToken)
                  } else {
                      console.log('- Error while retrieving from url: ...')
                      console.log('  statuscode:', res.statusCode)
                      console.log('  body:', responseData.toString())
                  }
              })
          })
          
          req.on('error', (error) => {
              console.log('- Error while retrieving from url: ...')
              console.log('  Error:', error)
          })

          req.write(data)
          req.end()
        }
      }

    }).catch((error) => {
      console.log(error)
    })
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
